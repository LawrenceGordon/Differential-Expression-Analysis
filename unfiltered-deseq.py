#! /mnt/lz01/hcgs/lmg1081/.conda/envs/pydeseq2/bin/python3.10

import argparse
import os
import pickle as pkl
import pandas as pd

import pydeseq2
from pydeseq2.DeseqDataSet import DeseqDataSet
from pydeseq2.DeseqStats import DeseqStats
#from pydeseq2.utils import load_data, test_valid_counts

import bioinfokit
from bioinfokit import visuz

# parses command-line arguments 
def parse_args():
    parser = argparse.ArgumentParser(description="Performs DESeq2 in python")
    parser.add_argument("matrix", help="Read counts matrix generated by kallisto")
    parser.add_argument("--alpha", "-p", type=float, default=0.05, help="P-value and adjusted p-value significance threshold")
    parser.add_argument("--no_cooks", action="store_false", help="whether to not filter and refit cooks outliers")
    parser.add_argument("--no_independent", action="store_false", help="whether to not independent filter")
    parser.add_argument("--plot", action="store_true", help="whether to plot final data")
    parser.add_argument("--save", action="store_true", help="whether to store intermediates in pkl format")
    parser.add_argument("--abnormal", nargs="+", help="sample prefix for abnormal samples")
    parser.add_argument("--normal", nargs="+", help="sample prefix for normal samples")
    parser.add_argument("--out", "-o", help="output prefix for all files")
    return parser.parse_args()

# read in counts matrix and process
def process_counts(matrix_csv):
    counts_df = pd.read_csv(matrix_csv, delimiter="\t", index_col=0).T
    #counts_df = counts_df.rename(columns={'Unnamed: 0': ''})
    counts_df = round(counts_df)
    counts_df.to_csv("transposed_{0}".format(os.path.basename(matrix_csv)), sep="\t")

    return counts_df

# create the clinical dataframe from the counts info
def process_clinical(counts_df, abnormal, normal):
    samples = (list(counts_df.index))
    conditions = {}

    for sample in samples:
        condition = "unaffected"
        for ab in abnormal:
            if ab in sample:
                condition = "affected"

        conditions[sample] = condition

    clinical_df = pd.DataFrame.from_dict(conditions, orient='index')
    clinical_df = clinical_df.rename(columns={0: 'condition'})

    print(clinical_df)

    return clinical_df

def deseq_stats(dds, alpha=0.05, cooks_filter=True, independent_filter=True, n_cpus=24, SAVE=True):
    """
    Statistical analysis with the DeseqStats class
    The `DeseqDataSet` class has a unique mandatory arguments, 
    `dds`, which should be a *fitted* `DeseqDataSet` object, as well as a set of optional keyword arguments, among which:

    - `alpha`: the p-value and adjusted p-value significance threshold (0.05 by default),
    - `cooks_filter`: whether to filter p-values based on cooks outliers (True by default),
    - `independent_filter`: whether to perform independent filtering to correct p-value trends (True by default).
    """
    stat_res = DeseqStats(dds, 
                alpha=alpha, 
                cooks_filter=cooks_filter, 
                independent_filter=independent_filter, 
                n_cpus=n_cpus)

    if SAVE:
        with open("stat_results.pkl", "wb") as f:
            pkl.dump(stat_res, f)

    return stat_res

# extract raw and filtered stats from stat summary
def filter_stats(stat_summary, out):
    stat_summary.to_csv("{0}_raw_unfiltered_deseq_cooks_refit.csv".format(out))
    stats_summary_non_nan = stat_summary.dropna(how='any', subset=['log2FoldChange', 'pvalue'])
    stats_summary_non_nan.to_csv("{0}_non_nan_unfiltered_deseq_cooks_refit.csv".format(out))

    return stats_summary_non_nan

# lfc shrink
def lfc_shrink(stat_res, out):
    stat_res.lfc_shrink()
    shrunk_stat_summary = stat_res.results_df
    shrunk_stat_summary_non_nan = shrunk_stat_summary.dropna(how='any', subset=['log2FoldChange', 'pvalue'])
    shrunk_stat_summary_non_nan.to_csv("{0}_shrunk_non_nan_unfiltered_deseq_cooks_refit.csv".format(out))

    return shrunk_stat_summary_non_nan

# isolate up and downregulated genes using adjusted pvalue
def get_significant_genes(df, pvalue=0.05, l2fc=1):
    sig = df.loc[df['padj'] <= pvalue]
    up = sig[sig['log2FoldChange'] >= l2fc]
    down = sig[sig['log2FoldChange'] <= -l2fc]
    return up, down

# function for writing out plots and final csvs
def write_out(df, shrunk_df, up, down, s_up, s_down, out, plot=True):
    up.to_csv("{0}_upregulated_non_nan_unfiltered_deseq_cooks_refit.csv".format(out))
    down.to_csv("{0}_downregulated_non_nan_unfiltered_deseq_cooks_refit.csv".format(out))
    s_up.to_csv("{0}_upregulated_shrunk_non_nan_unfiltered_deseq_cooks_refit.csv".format(out))
    s_down.to_csv("{0}_downregulated_shrunk_non_nan_unfiltered_deseq_cooks_refit.csv".format(out))

    if plot:
        visuz.GeneExpression.volcano(df=df, lfc='log2FoldChange', pv='padj', plotlegend=True, legendpos='upper right', legendanchor=(1.46,1), figname="{0}_volcano".format(out))
        visuz.GeneExpression.volcano(df=shrunk_df, lfc='log2FoldChange', pv='padj', plotlegend=True, legendpos='upper right', legendanchor=(1.46,1), figname="{0}_shrunk_volcano".format(out))

def main():
    args = parse_args()
    SAVE = args.save
    counts_df = process_counts(args.matrix)
    clinical_df = process_clinical(counts_df, args.abnormal, args.normal)

    print("Processed both Counts and Clinical Dataframes")

    # Start by creating a DeseqDataSet
    dds = DeseqDataSet(
        counts_df,
        clinical_df,
        design_factors="condition",
        reference_level="unaffected",
        refit_cooks=args.no_cooks,
        n_cpus=24
    )

    if SAVE:
        with open("dds.pkl", "wb") as f:
            pkl.dump(dds, f)
    
    # Then, run DESeq2 on it
    dds.deseq2()

    print("DESeq2 Analysis Complete")

    # generate stat summary
    stat_res = deseq_stats(dds, alpha=args.alpha, cooks_filter=args.no_cooks, independent_filter=args.no_independent, n_cpus=24, SAVE=True)

    # The `summary` function runs the statistical analysis (multiple testing adjustement included)
    stat_res.summary()

    stat_summary = stat_res.results_df

    print("Statistical Summaries Created")

    stats_summary_non_nan = filter_stats(stat_summary, args.out)
    shrunk_stat_summary_non_nan = lfc_shrink(stat_res, args.out)

    print("LFC Shrinkage Complete")

    up, down = get_significant_genes(stats_summary_non_nan, args.alpha)
    s_up, s_down = get_significant_genes(shrunk_stat_summary_non_nan, args.alpha)

    write_out(stats_summary_non_nan, shrunk_stat_summary_non_nan, up, down, s_up, s_down, args.out, args.plot)

    print("All Done")

main()
